---
- name: Setup application server
  hosts: all
  vars:
    aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    aws_session_token: "{{ lookup('env', 'AWS_SESSION_TOKEN') }}"
    aws_region: "{{ lookup('env', 'AWS_REGION') }}"
    ecr_repository_url: "{{ lookup('env', 'ECR_REPOSITORY_URL') }}"
    email_address: "{{ lookup('env', 'EMAIL_ADDRESS') }}"
    domain_name: "{{ lookup('env', 'DOMAIN') }}"
  become: true

  tasks:
    - name: Update and install required packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - unzip

    - name: Check if Docker is installed
      command: docker --version
      register: docker_installed
      ignore_errors: true

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        executable: /bin/bash
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
      when: docker_installed.failed

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes
      when: docker_installed.failed

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
      when: docker_installed.failed

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: docker_installed.failed

    - name: Ensure Docker is running and enabled on boot
      systemd:
        name: docker
        enabled: yes
        state: started
      when: docker_installed.failed

    - name: Check if AWS CLI is installed
      command: aws --version
      register: aws_cli_installed
      ignore_errors: true

    - name: Download AWS CLI installation script
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"
      when: aws_cli_installed.failed

    - name: Extract AWS CLI
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp"
        remote_src: yes
      when: aws_cli_installed.failed

    - name: Install AWS CLI
      command: "/tmp/aws/install"
      when: aws_cli_installed.failed

    - name: Log in to AWS ECR
      shell: |
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_repository_url }}
      args:
        executable: /bin/bash
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        AWS_SESSION_TOKEN: "{{ lookup('env', 'AWS_SESSION_TOKEN') }}"

    - name: Copy the docker compose file
      copy:
        src: ./docker-compose.yml
        dest: /home/ubuntu/
        owner: ubuntu
        group: ubuntu
        mode: '0700'

    - name: Remove conflicting containers
      shell: |
        docker rm -f watchtower backend || true
      args:
        executable: /bin/bash

    - name: Pull the latest images
      shell: |
        docker compose -f /home/ubuntu/docker-compose.yml pull
      args:
        executable: /bin/bash

    - name: Start Docker Compose services
      shell: |
        docker compose -f /home/ubuntu/docker-compose.yml up -d --remove-orphans
      args:
        executable: /bin/bash

    - name: Create systemd service file for Docker Compose
      copy:
        dest: /etc/systemd/system/docker-compose-app.service
        content: |
          [Unit]
          Description=Docker Compose Application Service
          Requires=docker.service
          After=docker.service

          [Service]
          Restart=always
          WorkingDirectory=/home/ubuntu/
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start Docker Compose service
      systemd:
        name: docker-compose-app
        enabled: yes
        state: started

    - name: Remove default NGINX configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

