/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SeguridadImport } from './routes/seguridad'
import { Route as IndexImport } from './routes/index'
import { Route as SeguridadIndexImport } from './routes/seguridad/index'
import { Route as UnidadNameImport } from './routes/unidad/$name'
import { Route as SeguridadRolesImport } from './routes/seguridad/roles'
import { Route as SeguridadPermisosImport } from './routes/seguridad/permisos'
import { Route as UnidadNameIndexImport } from './routes/unidad/$name/index'
import { Route as UnidadNameUsuariosImport } from './routes/unidad/$name/usuarios'
import { Route as UnidadNameSubunidadesImport } from './routes/unidad/$name/subunidades'
import { Route as UnidadNameRolesImport } from './routes/unidad/$name/roles'

// Create/Update Routes

const SeguridadRoute = SeguridadImport.update({
  path: '/seguridad',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SeguridadIndexRoute = SeguridadIndexImport.update({
  path: '/',
  getParentRoute: () => SeguridadRoute,
} as any)

const UnidadNameRoute = UnidadNameImport.update({
  path: '/unidad/$name',
  getParentRoute: () => rootRoute,
} as any)

const SeguridadRolesRoute = SeguridadRolesImport.update({
  path: '/roles',
  getParentRoute: () => SeguridadRoute,
} as any)

const SeguridadPermisosRoute = SeguridadPermisosImport.update({
  path: '/permisos',
  getParentRoute: () => SeguridadRoute,
} as any)

const UnidadNameIndexRoute = UnidadNameIndexImport.update({
  path: '/',
  getParentRoute: () => UnidadNameRoute,
} as any)

const UnidadNameUsuariosRoute = UnidadNameUsuariosImport.update({
  path: '/usuarios',
  getParentRoute: () => UnidadNameRoute,
} as any)

const UnidadNameSubunidadesRoute = UnidadNameSubunidadesImport.update({
  path: '/subunidades',
  getParentRoute: () => UnidadNameRoute,
} as any)

const UnidadNameRolesRoute = UnidadNameRolesImport.update({
  path: '/roles',
  getParentRoute: () => UnidadNameRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/seguridad': {
      id: '/seguridad'
      path: '/seguridad'
      fullPath: '/seguridad'
      preLoaderRoute: typeof SeguridadImport
      parentRoute: typeof rootRoute
    }
    '/seguridad/permisos': {
      id: '/seguridad/permisos'
      path: '/permisos'
      fullPath: '/seguridad/permisos'
      preLoaderRoute: typeof SeguridadPermisosImport
      parentRoute: typeof SeguridadImport
    }
    '/seguridad/roles': {
      id: '/seguridad/roles'
      path: '/roles'
      fullPath: '/seguridad/roles'
      preLoaderRoute: typeof SeguridadRolesImport
      parentRoute: typeof SeguridadImport
    }
    '/unidad/$name': {
      id: '/unidad/$name'
      path: '/unidad/$name'
      fullPath: '/unidad/$name'
      preLoaderRoute: typeof UnidadNameImport
      parentRoute: typeof rootRoute
    }
    '/seguridad/': {
      id: '/seguridad/'
      path: '/'
      fullPath: '/seguridad/'
      preLoaderRoute: typeof SeguridadIndexImport
      parentRoute: typeof SeguridadImport
    }
    '/unidad/$name/roles': {
      id: '/unidad/$name/roles'
      path: '/roles'
      fullPath: '/unidad/$name/roles'
      preLoaderRoute: typeof UnidadNameRolesImport
      parentRoute: typeof UnidadNameImport
    }
    '/unidad/$name/subunidades': {
      id: '/unidad/$name/subunidades'
      path: '/subunidades'
      fullPath: '/unidad/$name/subunidades'
      preLoaderRoute: typeof UnidadNameSubunidadesImport
      parentRoute: typeof UnidadNameImport
    }
    '/unidad/$name/usuarios': {
      id: '/unidad/$name/usuarios'
      path: '/usuarios'
      fullPath: '/unidad/$name/usuarios'
      preLoaderRoute: typeof UnidadNameUsuariosImport
      parentRoute: typeof UnidadNameImport
    }
    '/unidad/$name/': {
      id: '/unidad/$name/'
      path: '/'
      fullPath: '/unidad/$name/'
      preLoaderRoute: typeof UnidadNameIndexImport
      parentRoute: typeof UnidadNameImport
    }
  }
}

// Create and export the route tree

interface SeguridadRouteChildren {
  SeguridadPermisosRoute: typeof SeguridadPermisosRoute
  SeguridadRolesRoute: typeof SeguridadRolesRoute
  SeguridadIndexRoute: typeof SeguridadIndexRoute
}

const SeguridadRouteChildren: SeguridadRouteChildren = {
  SeguridadPermisosRoute: SeguridadPermisosRoute,
  SeguridadRolesRoute: SeguridadRolesRoute,
  SeguridadIndexRoute: SeguridadIndexRoute,
}

const SeguridadRouteWithChildren = SeguridadRoute._addFileChildren(
  SeguridadRouteChildren,
)

interface UnidadNameRouteChildren {
  UnidadNameRolesRoute: typeof UnidadNameRolesRoute
  UnidadNameSubunidadesRoute: typeof UnidadNameSubunidadesRoute
  UnidadNameUsuariosRoute: typeof UnidadNameUsuariosRoute
  UnidadNameIndexRoute: typeof UnidadNameIndexRoute
}

const UnidadNameRouteChildren: UnidadNameRouteChildren = {
  UnidadNameRolesRoute: UnidadNameRolesRoute,
  UnidadNameSubunidadesRoute: UnidadNameSubunidadesRoute,
  UnidadNameUsuariosRoute: UnidadNameUsuariosRoute,
  UnidadNameIndexRoute: UnidadNameIndexRoute,
}

const UnidadNameRouteWithChildren = UnidadNameRoute._addFileChildren(
  UnidadNameRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/seguridad': typeof SeguridadRouteWithChildren
  '/seguridad/permisos': typeof SeguridadPermisosRoute
  '/seguridad/roles': typeof SeguridadRolesRoute
  '/unidad/$name': typeof UnidadNameRouteWithChildren
  '/seguridad/': typeof SeguridadIndexRoute
  '/unidad/$name/roles': typeof UnidadNameRolesRoute
  '/unidad/$name/subunidades': typeof UnidadNameSubunidadesRoute
  '/unidad/$name/usuarios': typeof UnidadNameUsuariosRoute
  '/unidad/$name/': typeof UnidadNameIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/seguridad/permisos': typeof SeguridadPermisosRoute
  '/seguridad/roles': typeof SeguridadRolesRoute
  '/seguridad': typeof SeguridadIndexRoute
  '/unidad/$name/roles': typeof UnidadNameRolesRoute
  '/unidad/$name/subunidades': typeof UnidadNameSubunidadesRoute
  '/unidad/$name/usuarios': typeof UnidadNameUsuariosRoute
  '/unidad/$name': typeof UnidadNameIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/seguridad': typeof SeguridadRouteWithChildren
  '/seguridad/permisos': typeof SeguridadPermisosRoute
  '/seguridad/roles': typeof SeguridadRolesRoute
  '/unidad/$name': typeof UnidadNameRouteWithChildren
  '/seguridad/': typeof SeguridadIndexRoute
  '/unidad/$name/roles': typeof UnidadNameRolesRoute
  '/unidad/$name/subunidades': typeof UnidadNameSubunidadesRoute
  '/unidad/$name/usuarios': typeof UnidadNameUsuariosRoute
  '/unidad/$name/': typeof UnidadNameIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/seguridad'
    | '/seguridad/permisos'
    | '/seguridad/roles'
    | '/unidad/$name'
    | '/seguridad/'
    | '/unidad/$name/roles'
    | '/unidad/$name/subunidades'
    | '/unidad/$name/usuarios'
    | '/unidad/$name/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/seguridad/permisos'
    | '/seguridad/roles'
    | '/seguridad'
    | '/unidad/$name/roles'
    | '/unidad/$name/subunidades'
    | '/unidad/$name/usuarios'
    | '/unidad/$name'
  id:
    | '__root__'
    | '/'
    | '/seguridad'
    | '/seguridad/permisos'
    | '/seguridad/roles'
    | '/unidad/$name'
    | '/seguridad/'
    | '/unidad/$name/roles'
    | '/unidad/$name/subunidades'
    | '/unidad/$name/usuarios'
    | '/unidad/$name/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SeguridadRoute: typeof SeguridadRouteWithChildren
  UnidadNameRoute: typeof UnidadNameRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SeguridadRoute: SeguridadRouteWithChildren,
  UnidadNameRoute: UnidadNameRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/seguridad",
        "/unidad/$name"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/seguridad": {
      "filePath": "seguridad.tsx",
      "children": [
        "/seguridad/permisos",
        "/seguridad/roles",
        "/seguridad/"
      ]
    },
    "/seguridad/permisos": {
      "filePath": "seguridad/permisos.tsx",
      "parent": "/seguridad"
    },
    "/seguridad/roles": {
      "filePath": "seguridad/roles.tsx",
      "parent": "/seguridad"
    },
    "/unidad/$name": {
      "filePath": "unidad/$name.tsx",
      "children": [
        "/unidad/$name/roles",
        "/unidad/$name/subunidades",
        "/unidad/$name/usuarios",
        "/unidad/$name/"
      ]
    },
    "/seguridad/": {
      "filePath": "seguridad/index.tsx",
      "parent": "/seguridad"
    },
    "/unidad/$name/roles": {
      "filePath": "unidad/$name/roles.tsx",
      "parent": "/unidad/$name"
    },
    "/unidad/$name/subunidades": {
      "filePath": "unidad/$name/subunidades.tsx",
      "parent": "/unidad/$name"
    },
    "/unidad/$name/usuarios": {
      "filePath": "unidad/$name/usuarios.tsx",
      "parent": "/unidad/$name"
    },
    "/unidad/$name/": {
      "filePath": "unidad/$name/index.tsx",
      "parent": "/unidad/$name"
    }
  }
}
ROUTE_MANIFEST_END */
